
// Contains critical frame-navigating functionality.

// The top frame loads from the 'instructions' list below as the user proceeds through the task.
// Functionality for loading from this is in NextClick() and ScanClick() functions, below.

// These functions implement hard-coded correspondence between certain top and bottom screens, so that the tutorial appears interactive
// to the user. Any changes in this correspondence (new steps to tutorial, etc.) will need to be accompanied by changing the elements of
// the various lists: change_both_list, change_top_list, exception_states.

// Each new bottom-frame .html page loads a corresponding instructions_x_.js file that contains the appropriate tutorial screen.

// Noe that nextbutton, scanbutton, nextgamebutton are all loaded in the .html page, and its functionality is tied to the appropriate
// .js function (either in frame.js or in instructions_x_.js for the 'SCAN' button).


var instructions = ["<p>As you go through this tutorial, some instructions may appear as pop-ups.</p> Please read them carefully,\
 as they contain information you need to know!",
"<p>In a little while we will play a game. I will think of a number somewhere on the number line below,</p><p>and you will use scanners \
to try to find it.</p><p>In the next few screens, you'll learn to play the game.</p>",
"<p>Below are a bunch of green scanners. To use one, drag the scanner to the number line, \
and then press the 'SCAN' button.</p> <p> Please drag a scanner and place it anywhere in the dashed outline on the number line, \
and then pres 'SCAN'.</p>", 
"<p>When the scanner doesn't find a number, it turns red.</p> Click 'next' to continue the tutorial.",
"<p>Now we will see what the scanner does when it <b>does</b> find a number.</p> <p> Please drag a scanner and place it anywhere in \
the dashed outline on the number line, and then pres 'SCAN'.</p>", 
"<p>When the scanner <b>does</b> find a number, it turns blue.</p> Click 'next' to continue the tutorial.",
"<p>Some scanners work better than others. The lighter in color the scanner, the less likely it is to work properly.</p>\
<p>Next to each scanner is a number; it tells you how reliable the scanner is. For example, if it says '50%', it means that \
half the time the scanner will give you the right answer, and half the time it will give you the wrong answer.</p>\
<p>To see what I mean by this, drag the lightest-colored scanner to the dashed line and press 'SCAN' a few times. \
Note that I've made the hidden number visible for this example.",
"<p>Hmm. It looks like the scanner thinks the number is there even though it isn't.</p><p>Try scanning again.</p>",
"<p>Ok, this time the scanner thinks the number isn't there, which is good.</p><p>Note that the color might appear purple; that's because \
the red from the first scan and the blue from the new one are overlapping.</p><p>Scan a few more times, and then press 'next'.</p>",
"<p>Great. Press 'next' to move on.</p>",
"<p>In the real game you can use whichever scanners you want as you try to find the number. Once you think you know where it \
is, you'll drag the crosshairs to that spot, and press the 'next game' button.</p>\
<p>Note that the crosshairs won't move unless you've used a scanner. I want to make sure you're not guessing!</p>\
<p>Use a scanner, then drag the crosshairs to the actual number and press 'next game'.</p>",
"<p>Good, now drag the crosshairs to the actual number and press 'next game'.</p>",
"<p>Ok, great. The tutorial is over.</p><p>On the next page you'll start playing the game. It consists of five rounds. \
In each round, you can use whichever scanners you want as you try to find the number.</p><p>Once you think you know where it is, drag \
the crosshairs to that spot, and press the 'NEXT' button.</p><p> Each time you finish a round you'll begin a new one, \
where you'll have to find a new hidden number.</p>"];

var interstitial_text = "<p>Great! you found the number. Now click 'next' to play the next round.</p>";

var thank_you_text =  ["<p>Great! You're all done.<p> <p>You found ", " targets!<p> <p>Thank you for partipating!<p>\
<p>To get credit for this HIT, please paste the red code below in the MTurk window from which you began this task.<p>"];

function StartSession()
{
	if (parent.topframe.userID==null)
	{
		//if userID variable is null, start a new session
		session = StartPHPSession({'user':'123'}); //call the ajax function that communicates with database
	    var parsed_session = JSON.parse(session); //parse data
        parent.topframe.userID = parsed_session['user'];
        parent.topframe.cond = parsed_session['cond'];
    }
		//otherwise do nothing; session variables will already be stored in parent.topframe.varname
}


function StartPHPSession(userID)
{
  var result = 0;
  $.ajax({

                  type: "POST",
                  datatype: "json",
                  url: "http://198.61.169.95/pedro/js/intro.php",
                  data: userID,
                  async: false,
                  success: function(data,status){
                    //alert("Data: " + data);
                    result = data;
                  },
                  error: function(){
                    alert('failure to query database');
                },
                });
  return result
};

function UpdateData(output)
{
	parent.topframe.data.push(output);
}

function SendAllData()
{
	alert(parent.topframe.data);
	setTimeout(function()
        {postToPHP(parent.topframe.data)}, 0);
	alert('sent');
}
function postToPHP(data_to_send) //this isn't working now
{
	alert('hi');
  // alert(data_to_send.user);
  $.ajax({
  type: "POST",
  datatype: "json",
  url: "http://198.61.169.95/pedro/js/write_to_mongo.php",
  data: data_to_send,
  success: function(data) {
  	alert('sending was a success');
  },
  error: function(){
    alert('failure to send to database');
}
});
}

function GetInterstitial(found_target)
{

	parent.topframe.current_trial++;

	if (found_target)
	{
		parent.topframe.correct++;
	}
	if (parent.topframe.current_trial==parent.topframe.total_trials)
	{
		SendAllData();
        parent.topframe.document.getElementById("tutorial").innerHTML = thank_you_text[0]+parent.topframe.correct.toString()+'/'+parent.topframe.total_trials.toString()+thank_you_text[1];
       // parent.bottomframe.location.href = 'file:///Users/pedro/Desktop/js%20sandbox/thankyou.html?c='+parent.topframe.userID;
	    parent.bottomframe.location.href = 'http://198.61.169.95/pedro/js/thankyou.html?c='+parent.topframe.userID;
}
	else
	{
		if (found_target)
			text = "<p>Great job; you found the hidden number! Now click 'next' to play the next round.</p>";
		else
			text = "<p>Hmm... it seems you didn't find the hidden number. Click 'next' to play the next round.</p>";
	}
	
	
	parent.topframe.document.getElementById("tutorial").innerHTML = text; //interstitial_text;
	parent.bottomframe.location = 'interstitial.html';
	parent.topframe.trial++;
	parent.topframe.document.getElementById("nextbutton").style.display="block";
}
function NextClick()
{
	state = [parent.topframe.top_index, parent.topframe.bottom_index];
	// alert(state);
	if (equal(state, [11,5]))
	{
		parent.topframe.document.getElementById("nextbutton").style.display="block";
	}
	if (ChangeBoth(state))
	{	
		//increment top and bottom windows
		parent.topframe.top_index++;
		parent.topframe.bottom_index++;
		parent.topframe.document.getElementById("tutorial").innerHTML=instructions[parent.topframe.top_index];
		parent.bottomframe.location = "instructions"+parent.topframe.bottom_index.toString()+".html";

	}
    else if (equal(state, [1,1]))//12,6
	{
		//tutorial is over; go to actual task
		//parent.window.location.href = "http://198.61.169.95/pedro/js/index.html";
		// parent.topframe.location.href = 'file:///Users/pedro/Desktop/js%20sandbox/find_the_number.html';
		parent.topframe.document.getElementById("tutorial").innerHTML="<p>Find the number!</p>";
		parent.topframe.document.getElementById("nextbutton").style.display="none";
		// "http://198.61.169.95/pedro/js/index.html";
		parent.bottomframe.location.href = "http://198.61.169.95/pedro/js/index.html";
	}
}
function ScanClick()
{
	//the 'scan' button should only advance the top window, to give the user additional instructions
	state = [parent.topframe.top_index, parent.topframe.bottom_index];
	if (!ChangeBoth(state)) //make sure you shouldn't be changing both windows
	{
		if (!ExceptionState(state)) //unless you're at an exception state, change the top index
			{
				parent.topframe.top_index++;
				state[0]++;
			}
		if (ChangeTop(state)) //and if you should change the top window, do so.
			parent.topframe.document.getElementById("tutorial").innerHTML=instructions[parent.topframe.top_index];
	}
	// alert([parent.topframe.top_index, parent.topframe.bottom_index]); //remove once this is implemented
}

//simple helper functions for the above
function ChangeBoth(state)
{
	//checks change_both_list below; if state is in the list, returns 'true'.
	change_both_list = [[0,0]];//,[1,1],[3,2],[5,3], [9,4], [11,5]];
	if (short_list_in_long_list(state, change_both_list))
		return true;
	else
		return false;
}
function ChangeTop(state)
{
	//functions by exception; returns true as long as state is *not* in the list below.
	change_top_list = [[9,4]];
	if (!short_list_in_long_list(state, change_top_list))
		return true;
	else
		return false;
}
function ExceptionState(state)
{
	//returns true if 'state' is an exception state
	exception_states = [[9,4]];
	if (short_list_in_long_list(state, exception_states))
		return true;
	else
		return false;
}


//general list functions
function in_list(a, list_b)
{
	for (var i=0; i<list_b.length; i++)
	{
		if (a==list_b[i])
			return true;
	}
	return false;
}
function short_list_in_long_list(shortlist, longlist)
{
	//takes a short list and a long list composed of short lists, returns whether the first list is in the long one.
	//e.g., [0,2] in [[0,1], [3,1], [0,2]]
	for (var i=0; i<longlist.length; i++)
	{
		if (equal(shortlist, longlist[i]))
			{
				return true;
			}
	}
	return false;
}
function equal(a,b)
{
	//compares piecewise elements of lists and b.
	for (var i=0; i<a.length; i++)
	{
		if (a[i]!=b[i])
		{
    		return false;
      	}
	}
  return true;
}
