

            //complete. gets sessions, writes to database, has all scanner functionality, 

            window.onload = function () {

                var R = Raphael(0, 0, "100%", "100%"),

                    line_height = 75;

                    h = window.innerHeight,

                    w = window.innerWidth,

                    nll = .66*w, //number line length

                    line = R.rect('17%', String(line_height)+'%', '66%', 2).attr({fill: "white", stroke: "red", opacity: 1}),

                    number_line_start = R.text('17%', String(line_height+2)+'%', '1').attr({fill: '#333'}),

                    number_line_end = R.text('83%', String(line_height+2)+'%', '100').attr({fill: '#333'}),



                    // button = R.rect('47%', String(line_height+10)+'%', '6%', 23, 3).attr({fill: '#CCC', stroke: "red", opacity: 1}),

                    // button_text = R.text('50%', String(line_height+12)+'%', 'SCAN').attr({fill: 'black'}),



                    textbox = R.rect('15%', '2%', '70%', 150, 5).attr({stroke:"white", opacity:1});



                var urlString = document.URL;

                var urlParams = parseURLParams(urlString);



        

                //turn all of this into a determineSession() function. declare vars above and then change them in function.

                if (urlParams==undefined)

                    {

                        //beginning. start session.

                        

                        var session = getSession({'user':'123'});

                        var parsed_session = JSON.parse(session);

                        var userID = parsed_session['user'];

                        var cond = parsed_session['cond'];

                        var trial = parseInt(parsed_session['trial']);

                    }

                else

                {

                    //continue session.

                    var session = getSession({'user':urlParams['c'], 'cond':urlParams['d'], 'trial':urlParams['e']});

                    var parsed_session = JSON.parse(session);

                    // if (parsed_session=='last')

                    // {

                    //     alert('last session');

                    // }

                    var urlParams = parseURLParams(urlString);

                    var userID = parsed_session['user'];

                    var cond = parsed_session['cond'];

                    var trial = parseInt(parsed_session['trial']);

                }





                    ////scanners

                cond = 2;

                    //'beta' is the failure probability. success is 1-beta.
                /*
                if (cond==0)

                {

                    //length-only condition



                    r_text = R.text(.09*w,(line_height-38)*.01*h, '87%').attr({fill:'#333'}),

                    g_text = R.text(.09*w,(line_height-33)*.01*h, '87%').attr({fill:'#333'}),

                    b_text = R.text(.09*w,(line_height-28)*.01*h, '87%').attr({fill:'#333'}),

                    p_text = R.text(.09*w,(line_height-23)*.01*h, '87%').attr({fill:'#333'}),

                    

                    r = R.rect(.10*w,(line_height-40)*.01*h,.0625*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5,}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-40)*.01*h]),

                    g = R.rect(.10*w,(line_height-35)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-35)*.01*h]),

                    b = R.rect(.10*w,(line_height-30)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-30)*.01*h]),

                    p = R.rect(.10*w,(line_height-25)*.01*h,.5*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-25)*.01*h]);



                    //larger set

                    // r = R.rect(.10*w,(line_height-40)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5,}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-40)*.01*h]),

                    // g = R.rect(.10*w,(line_height-35)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-35)*.01*h]),

                    // b = R.rect(.10*w,(line_height-30)*.01*h,.5*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-30)*.01*h]),

                    // p = R.rect(.10*w,(line_height-25)*.01*h,.75*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',0).data('pos', [.1*w,(line_height-25)*.01*h]);

                }

                else if (cond==1)

                {

                    //reliability-only condition



                    r_text = R.text(.09*w,(line_height-38)*.01*h, '87%').attr({fill:'#333'}),

                    g_text = R.text(.09*w,(line_height-33)*.01*h, '75%').attr({fill:'#333'}),

                    b_text = R.text(.09*w,(line_height-28)*.01*h, '62%').attr({fill:'#333'}),

                    p_text = R.text(.09*w,(line_height-23)*.01*h, '50%').attr({fill:'#333'}),



                    r = R.rect(.10*w,(line_height-40)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5,}).data('eff', 1).data('beta',.125).data('pos', [.1*w,(line_height-40)*.01*h]),

                    g = R.rect(.10*w,(line_height-35)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.6)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.25).data('pos', [.1*w,(line_height-35)*.01*h]),

                    b = R.rect(.10*w,(line_height-30)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.8)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.375).data('pos', [.1*w,(line_height-30)*.01*h]),

                    p = R.rect(.10*w,(line_height-25)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,1)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.5).data('pos', [.1*w,(line_height-25)*.01*h]);  



                    // r = R.rect(.10*w,(line_height-40)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .5,}).data('eff', 1).data('beta',.125).data('pos', [.1*w,(line_height-40)*.01*h]),

                    // g = R.rect(.10*w,(line_height-35)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.6)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.25).data('pos', [.1*w,(line_height-35)*.01*h]),

                    // b = R.rect(.10*w,(line_height-30)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.8)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.375).data('pos', [.1*w,(line_height-30)*.01*h]),

                    // p = R.rect(.10*w,(line_height-25)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,1)", stroke: "white", opacity: .5}).data('eff', 1).data('beta',.5).data('pos', [.1*w,(line_height-25)*.01*h]);  

                }

                else if (cond==2)

                {

                    //crossed condition*/



                    r_text = R.text(.09*w,(line_height-38)*.01*h, '87%').attr({fill:'#333'}),

                    g_text = R.text(.09*w,(line_height-33)*.01*h, '75%').attr({fill:'#333'}),

                    b_text = R.text(.09*w,(line_height-28)*.01*h, '62%').attr({fill:'#333'}),

                    p_text = R.text(.09*w,(line_height-23)*.01*h, '50%').attr({fill:'#333'});



                    /*r = R.rect(.10*w,(line_height-40)*.01*h,.0625*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.125).data('pos', [.1*w,(line_height-40)*.01*h]),

                    g = R.rect(.10*w,(line_height-35)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.6)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.25).data('pos', [.1*w,(line_height-35)*.01*h]),

                    b = R.rect(.10*w,(line_height-30)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.8)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.375).data('pos', [.1*w,(line_height-30)*.01*h]),

                    p = R.rect(.10*w,(line_height-25)*.01*h,.5*nll,30,10).attr({fill: "hsb(.35,.4,1)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.5).data('pos', [.1*w,(line_height-25)*.01*h]);



                    //larger set

                    // r = R.rect(.10*w,(line_height-40)*.01*h,.125*nll,30,10).attr({fill: "hsb(.35,.4,.4)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.125).data('pos', [.1*w,(line_height-40)*.01*h]),

                    // g = R.rect(.10*w,(line_height-35)*.01*h,.25*nll,30,10).attr({fill: "hsb(.35,.4,.6)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.25).data('pos', [.1*w,(line_height-35)*.01*h]),

                    // b = R.rect(.10*w,(line_height-30)*.01*h,.5*nll,30,10).attr({fill: "hsb(.35,.4,.8)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.375).data('pos', [.1*w,(line_height-30)*.01*h]),

                    // p = R.rect(.10*w,(line_height-25)*.01*h,.75*nll,30,10).attr({fill: "hsb(.35,.4,1)", stroke: "white", opacity: .4}).data('eff', 1).data('beta',.5).data('pos', [.1*w,(line_height-25)*.01*h]);

                }*/



                //crosshairs

                c = R.image("imagebot2.svg", .8*w, (line_height-35)*.01*h, 50, 50).attr({fill: "green", opacity: 1}).data('pos', [.48*w,(line_height+15)*.01*h]);

                var scanners = makeScanners([.0625*nll, .125*nll, .25*nll, .5*nll], [.87, .75, .62, .5]);



                //var scanners = [r,g,b,p];

                var nextable = false; // can't click next unless crosshairs is on line

                var scannable = false; // button won't click unless a scanner is in place

                var go_to_end = false;

                var printIndex = 0; // used for determining y-axis location of print statements (for debugging)

                var game = 0; // 0 = single number, 1 = range

                var target = setTarget(game);

                //This is what gets sent to the database when people click the 'next' button.

                // var output = {'user':null, 'trial':null, 'target':target, 'clicks':[], 'result':[], 'correct':null};



                var output = {'trial':null, 'clicks':[], 'guess':null, 'target':null, 'correct':null};



                //make target appear if you need it for testing

                // var t = R.circle(target[0], String(line_height+.2)+'%', 3).attr({fill: 'red'});



                if (parent.topframe.trial == parent.topframe.total_trials-1)

                {

                    go_to_end = true;

                }



                StartSession();

                //Sends data when the 'next' button is clicked. Use window.location.href command to send people to a new page.

                c.node.onclick = function()

                {

                    if (!scannable){

                        top_alert("<p>You may only move the crosshairs after you have used at least \

                        one scanner on the number line.</p>", "<p>Find the number!<p>");

                        // alerted();

                    }

                    if (h*.01*(line_height-5)<(c.attr('y')+25) && (c.attr('y')+25)<h*.01*(line_height+2))

                    {

                        nextable = true;

                    }

                }



                c.node.onmouseover = function(){

                    setTimeout(function(){

                        top_alert("<p>You may only move the crosshairs after you have used at least \

                        one scanner on the number line.</p>", "<p>Find the number<p>");

                    }, 500);

                }





                c.node.ondragstart = function()

                {

                    top_alert();

                }



                //Main function

                mainButtonClick = function()

                {

                    scanners_on_line = 0;

                    for (var i=0; i < scanners.length; i++)

                    {

                        var yloc = String(70+i*3)+'%';

                        if (isScannerOnLine(scanners[i])==true) //if a scanner is on the number line

                            {   scanners_on_line += 1;

                                scannable = true;

                                // button.animate({fill:'white'}, 200, '<');

                                // setTimeout(function()

                                // {

                                //     button.animate({fill: '#CCC'}, 400, '<');}, 200);

                            }

                    };

                    if (scanners_on_line == 1) //This is the correct number of scanners to have on line. Scan.

                    {

                        for (var i=0; i < scanners.length; i++)

                        {

                            if (isScannerOnLine(scanners[i])==true)

                            {

                                // button.animate({fill:'white'}, 200, '<');

                                // setTimeout(function()

                                // {

                                //     button.animate({fill: '#CCC'}, 400, '<');}, 200);

                                scan(scanners[i]);

                                setTimeout(function()

                                {

                                    for (var i=0; i<scanners.length; i++)

                                    {

                                        scanners[i].animate({x: scanners[i].data('pos')[0], y:scanners[i].data('pos')[1]});

                                    }

                                },400);

                            }

                        }

                        //animate the crosshairs

                        R.set(scanners, c).drag(move, start, up);



                        

                    }

                    else //Don't scan.

                    {

                      if (!scannable)

                        {

                            //No scanner on the line

                            // alert('You must place a scanner on the number line before clicking \'SCAN\'.');

                            top_alert('<p>You must place a scanner on the number line before clicking \'SCAN\'.</p>', '<p>Find the number!</p>')

                        }

                        else

                        {

                            //Too many scanners on the line.



                            for (var i=0; i<scanners.length; i++)

                            {

                                scanners[i].animate({x: scanners[i].data('pos')[0], y:scanners[i].data('pos')[1]});

                            }

                            setTimeout(function()

                            {

                                top_alert('<p>Only one scanner can be on the number line.</p>', '<p>Find the number!</p>');

                                }, 300);

                        }

                    }

                    

                };



                top_alert = function(new_text)

                {

                    old_text = parent.topframe.document.getElementById("tutorial").innerHTML;

                    parent.topframe.document.getElementById("tutorial").innerHTML = new_text;

                    setTimeout(function()

                    {

                        parent.topframe.document.getElementById("tutorial").innerHTML = old_text;

                    }, 2000);

                }



                nextButtonClick = function()

                {

                    if (h*.01*(line_height-5)<(c.attr('y')+25) && (c.attr('y')+25)<h*.01*(line_height+2))

                        //there's a little built in wiggle room so that the crosshairs doesn't have to be exactly on the line

                    {

                        var xPos = c.attr('x')+25;

                        var floor = .17*w;

                        var range = .66*w;

                        var num = ((xPos - floor)/(range))*100;

                        var a = Math.round(num);

                        nextable = true;

                    }

                    else

                    {

                        top_alert("<p>Place the crosshairs on the number line first</p>", "<p>Find the number!</p>");

                    }

                    if (nextable == true)

                    {

                        //pushing data to 'output'

                        output.guess = xPos;

                        output.target = target[0]; //remove the indexing if you ever run the 'range' condition.

                        output.trial = parent.topframe.trial;

                        did_user_find_target = inCrosshairs();

                        output.correct = did_user_find_target;

                        setTimeout(function()

                        {

                            UpdateData(output);

                            GetInterstitial(did_user_find_target);

                        }, 500);

                        

                    }

                };

                



                //Helper functions//



                isScannerOnLine = function(scanner)

                {

                    //Takes a scanner as argument, returns whether it's on the number line

                    if (window.innerHeight*.01*(line_height-3.5)<scanner.attr('y') && scanner.attr('y')<window.innerHeight*.01*line_height)

                        return true;

                    else

                        return false;

                }

                scan = function(scanner)

                {   

                    //Takes a scanner as argument, returns the result of scanning the number line below it.

                    

                    left = scanner.attr('x');

                    right = left + scanner.attr('width');

                    works = (scanner.data('eff') >= Math.random()); //scanner will function with frequency given by scanner.eff

                    correct_signal = (scanner.data('beta') <= Math.random()); //scanner will return true signal with p(scanner.beta)

                    signal = 'none';

                    if (works)

                    {

                        //single target

                        if (target.length == 1)

                        {

                            //found the target

                            if (left <=target[0] && target[0] <= right)

                            {

                                if (correct_signal)

                                {

                                    signal = 'blue';

                                    scanner.glow({color: "hsb(.6, 1, 1)", width: 5});



                                }

                                else

                                {

                                    signal = 'red';

                                    scanner.glow({color: "red",width: 5});



                                }



                            }

                            //missed the target

                            else

                            {

                                if (correct_signal)

                                {

                                    signal = 'red';

                                    scanner.glow({color: "red",width: 5});



                                }

                                else

                                {

                                    signal = 'blue';

                                    // scanner.glow({color: "hsb(.3,1,1)"});

                                    scanner.glow({color: "hsb(.6, 1, 1)",width: 5});

                                }

                            }

                        }

                        //

                        else

                        {

                            ////this part has no false signals implemented.

                            alert('range game');

                            //missed the target

                            if (left>target[1] || right<target[0])

                            {

                                scanner.glow({color: "red",width: 5});

                                print('no overlap');

                            }

                            else

                            {

                                overlap = getOverlap(target, [left, right]);

                                col = makeHSB(overlap);

                                scanner.glow({color:col,width: 5});

                                print('overlap');

                                print(overlap);

                            }

                        }

                        

                    }

                    else

                    {

                        scanner.animate({opacity: .2}, 1000, 'bounce');

                    setTimeout(function()

                        {scanner.animate({opacity: .5}, 1000, 'bounce')}, 700);

                    }

                    //Append new click data (scanner width, location_left, location_right, result) to the output array

                    output.clicks.push([scanner.attr('width'),left, right, signal]);

                };







                getOverlap = function(targetRange, scannerRange)

                {

                    scannerLength = scannerRange[1] - scannerRange[0];

                    //scanner 

                    if (inRange(targetRange, scannerRange[0]) && inRange(targetRange, scannerRange[1]))

                    {

                        return 1;

                    }

                    else if (inRange(targetRange, scannerRange[0]) && (!inRange(targetRange, scannerRange[1])))

                    {

                        return (targetRange[1] - scannerRange[0])/(scannerLength);

                    }

                    else if ((!inRange(targetRange, scannerRange[0])) && !inRange(targetRange, scannerRange[1]))

                    {

                        return (scannerRange[1] - targetRange[0])/(scannerLength);

                    }

                }



                inCrosshairs = function()

                {

                    if (target.length ==1)

                    {

                        if (c.attr('x')<= target[0] && target[0]<= (c.attr('x')+50))

                        {

                            return true;

                        }

                        else

                        {

                            return false;

                        }

                    }

                }



                crosshairCompare = function()

                //this will be in pixel difference I believe

                //this is also only for a single target and doesn't apply to the range condition

                {

                    if (target.length ==1)

                    {

                        diff = (c.attr('x')+25)-target[0];

                        if (diff<0)

                        {

                            diff = diff*(-1);

                        }

                        return diff

                    }

                }



                inRange = function(range, num)

                {

                    if (num>range[0] && num<range[1])

                        return true;

                    else

                        return false;

                }

               

                print = function(string)

                {

                    //helper function for easy printing

                    height = 70+printIndex;

                    stringHeight = String(height)+'%';

                    R.text('50%', stringHeight, string).attr({fill: 'white'});   

                    printIndex +=2;

                };

                var start = function () {

                    this.ox = this.attrs.x;

                    this.oy = this.attrs.y;

                    this.animate({opacity: .25}, 500, ">");

                },

                move = function (dx, dy) {

                    this.attr({x: this.ox + dx, y: this.oy + dy});

                },

                up = function () {

                    this.animate({opacity: .5}, 700, "bounce");

                };

                makeHSB = function(num)

                {

                    //sets the saturation value of HSV string to 'num'

                    str = "hsb(.3,"+num.toString()+",1)";

                    return str;

                };

                R.set(scanners).drag(move, start, up);

            };

                convertNumber = function(num)

                {

                    //converts number-line coordinates to absolute coordinates

                    range = .66*window.innerWidth;

                    left = .17*window.innerWidth;

                    newNum = left + num*.01*range;

                    return newNum;

                };

                setTarget = function(game)

                {

                    //picks a random number bet. 1-100, sets as target

                    //game==0: single number game

                    //game ==1: range game

                    var target = [];

                    target.push(convertNumber(Math.floor(Math.random()*101)));



                    if (game==0)

                    {

                        return target;

                    }

                    else

                    {

                        //push a second target

                        target.push(convertNumber(Math.floor(Math.random()*101)));

                        //put them in [small, large] order.

                        if (target[1]<target[0])

                        {

                            tmp = target[0];

                            target[0] = target[1];

                            target[1] = tmp;

                        }

                        return target;

                    }

                };

                function parseURLParams(url) {



                  var queryStart = url.indexOf("?") + 1;

                  var queryEnd   = url.indexOf("#") + 1 || url.length + 1;

                  var query      = url.slice(queryStart, queryEnd - 1);



                  if (query === url || query === "") return;



                  var params  = {};

                  var nvPairs = query.replace(/\+/g, " ").split("&");



                  for (var i=0; i<nvPairs.length; i++) {

                    var nv = nvPairs[i].split("=");

                    var n  = decodeURIComponent(nv[0]);

                    var v  = decodeURIComponent(nv[1]);

                    if ( !(n in params) ) {

                      params[n] = [];

                    }

                    params[n].push(nv.length === 2 ? v : null);

                  }

                  return params;

                };

                getSession = function(userID)

                {

                  var result = 0;

                  $.ajax({



                                  type: "POST",

                                  datatype: "json",

                                  url: "http://198.61.169.95/pedro/js/intro.php",

                                  data: userID,

                                  async: false,

                                  success: function(data,status){

                                    //alert("Data: " + data);

                                    result = data;

                                  },

                                  error: function(){

                                    alert('failure to query database');

                                },

                                });

                  return result

                };
                makeScanners = function(sizes, efficacies)
                {
                    var R = Raphael(0, 0, "100%", "100%"),
                        line_height = 75;
                        h = window.innerHeight,
                        w = window.innerWidth,
                        scanners = [],
                        z = 0;

                    for (var i=0; i < sizes.length; i++){
                        
                        var fill = 1-efficacies[i];
                        //alert(fill);
                        //r = (R.rect(.10*w, (line_height-(40-(5*i)))*.01*h, sizes[i], .05*h, 10).attr({fill: "hsb(.35,.4, .3 )", stroke: "white", opacity: .4,}).data('eff', efficacies[i]).data('beta',0).data('pos', [.10*w,(line_height-(40-(5*i)))*.01*h]));
                        //alert('hi');
                        r = (R.rect(.10*w, (line_height-(40-(5*z)))*.01*h, sizes[z], .05*h, 10).attr({fill: "hsb(.35,.4, .8 )", stroke: "white", opacity: efficacies[z]*efficacies[z]}).data('eff', 1 ).data('beta', (1-efficacies[z]).data('pos', [.10*w,(line_height-(40-(5*z)))*.01*h]));
                        scanners.push(r);
                        z++;
                    }
                    return scanners;    
                };





                

                

